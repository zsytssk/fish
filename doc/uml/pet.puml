@startuml

namespace controller #DDDDDD {
	class TestController {
		- QuestionServicen questionService;
		+ Question getQuestion(@DBExchange,int questionId);
	}
	TestController <--> spring.aop.DBExchangeHandler : Spring AOP
}

namespace service #DDDDDD {
	interface QuestionService {
		+ {abstract} Question getMessage(int questionId);
	}
	class DbImpl {
		+ Question getMessage(int questionId);
	}
	class RedisImpl {
		+ Question getMessage(int questionId);
	}
	DbImpl .up.|> QuestionService
	RedisImpl .up.|> QuestionService
}


namespace spring.bean #DDDDDD {
	class StateControl {
		- QuestionService questionService;
		- RedisImpl redisImpl;
		- DbImpl dbImpl;

		+ StateControl(QuestionService questionService);
		+ Question getMessage(int questionId);
	}
	StateControl --> service.QuestionService
	StateControl --> service.RedisImpl
	StateControl --> service.DbImpl
}

namespace spring.aop #DDDDDD {
	class DBExchangeHandler {
		- StateControl stateControl;
		- void before(JoinePoint joinePoint,@DBExchange dBExchange);
	}
	DBExchangeHandler -down-> spring.bean.StateControl : get really status for QuestionService
}

annotation DBExchange

DBExchange ... controller.TestController : label annotation
controller.TestController *--> service.QuestionService

@enduml